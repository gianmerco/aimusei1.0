# monolith-FINALE.yaml

# --- Creiamo un namespace dedicato per la nostra app, più pulito ---
# Non lo useremo per ora per semplicità, ma è buona norma.
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: aimusei

---

# --- DEPLOYMENT FRONTEND ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  # namespace: aimusei # Tutto nel namespace 'default' per ora
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend-container
        image: aptul9/frontend:1.5 # L'ultima immagine funzionante
        ports:
        - containerPort: 80

---

# --- SERVICE FRONTEND ---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  # namespace: aimusei
spec:
  type: ClusterIP # L'Ingress lo espone, non serve NodePort
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80

---

# --- DEPLOYMENT BACKEND ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  # namespace: aimusei
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend-container
        image: aptul9/backend:1.6
        ports:
        - containerPort: 8090
        env:
        - name: SPRING_DATA_MONGODB_URI
          value: "mongodb://mongo-service:27017/aimusei?connectTimeoutMS=30000&socketTimeoutMS=30000"
        command:
        - "java"
        - "-jar"
        - "app.jar"
        - "--spring.config.location=file:/app/config/config.properties"
        - "--server.port=8090"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: datasources-volume
          mountPath: /opt/ai/config
      volumes:
      - name: config-volume
        configMap:
          name: backend-config
      - name: datasources-volume
        configMap:
          name: datasources-config

---

# --- CONFIGMAPS BACKEND ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  # namespace: aimusei
data:
  config.properties: |
    aimusei.key=keytest123123
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datasources-config
  # namespace: aimusei
data:
  datasources.env: |
    mongo.host=mongo-service
    mongo.database=aimusei

---

# --- SERVICE BACKEND ---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  # namespace: aimusei
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - port: 8090
    targetPort: 8090

---

# --- DEPLOYMENT MONGODB ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  # namespace: aimusei
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:5.0
        ports:
        - containerPort: 27017

---

# --- SERVICE MONGODB ---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  # namespace: aimusei
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017

---

# --- L'INGRESSO. SEMPLICE. PULITO. NEL NAMESPACE 'DEFAULT'. ---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aimusei-ingress
  # namespace: aimusei
spec:
  ingressClassName: nginx
  rules:
  - host: "aimusei.local"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80